"use strict";(self.webpackChunksol_2_ink=self.webpackChunksol_2_ink||[]).push([[971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const s={sidebar_position:5,title:"Parsing expressions"},a=void 0,o={unversionedId:"how_it_works/parsing_expressions",id:"how_it_works/parsing_expressions",title:"Parsing expressions",description:"Another step of parsing a statement is parsing of each expressions. Here the program will decide how to parse each expression inside of a statement.",source:"@site/docs/how_it_works/parsing_expressions.md",sourceDirName:"how_it_works",slug:"/how_it_works/parsing_expressions",permalink:"/sol2ink/docs/how_it_works/parsing_expressions",draft:!1,editUrl:"https://github.com/Supercolony-net/sol2ink/tree/main/docs/docs/docs/how_it_works/parsing_expressions.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Parsing expressions"},sidebar:"tutorialSidebar",previous:{title:"Parsing functions",permalink:"/sol2ink/docs/how_it_works/parsing_functions"},next:{title:"Assembling a contract",permalink:"/sol2ink/docs/how_it_works/assembler"}},p={},l=[{value:"Basics",id:"basics",level:3},{value:"Enclosed expressions",id:"enclosed-expressions",level:3},{value:"Hex string",id:"hex-string",level:3},{value:"type(T).f / type(T)",id:"typetf--typet",level:3},{value:"Mapping/array manipulation",id:"mappingarray-manipulation",level:3}],c={toc:l};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Another step of parsing a statement is parsing of each expressions. Here the program will decide how to parse each expression inside of a statement."),(0,i.kt)("h3",{id:"basics"},"Basics"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Literals are parsed without any modifications"),(0,i.kt)("li",{parentName:"ul"},"Specific expressions like ",(0,i.kt)("inlineCode",{parentName:"li"},"address(0)"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"msg.sender")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"msg.value")," are parsed in their ink! form"),(0,i.kt)("li",{parentName:"ul"},"Solidity types are converted to Rust/ink! types")),(0,i.kt)("h3",{id:"enclosed-expressions"},"Enclosed expressions"),(0,i.kt)("p",null,"Parsing an enclosed expression like ",(0,i.kt)("inlineCode",{parentName:"p"},"((1+2)+3)+4")," may be problematic. That is why Sol2Ink first gets rid of the brackets by extracting expressions in parentheses, substituting them with a simple expression, which is then parsed on its own and returning them as ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression::Enclosed"),". Here is an example of how the before mentioned expression would be parsed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let extracted = self.extract_parentheses("((1 + 2) + 3) + 4", false);\nassert_eq!(extracted.0, String::from("___0___ + 4"));\nassert_eq!(extracted.1, 1);\nassert_eq!(extracted.2.get("___0___"), Some(\nExpression::Arithmetic(Expression::Enclosed(Expression::Arithmetic(Expression::Arithmetic(1, 2, Operation::Add)), 3, Operation::Add), 4, Operation::Add)));\n')),(0,i.kt)("h3",{id:"hex-string"},"Hex string"),(0,i.kt)("p",null,"Expressions like ",(0,i.kt)("inlineCode",{parentName:"p"},'hex"0000_0000_0000_0000"')," are converted to a call of ",(0,i.kt)("inlineCode",{parentName:"p"},"&hex::decode")," function."),(0,i.kt)("h3",{id:"typetf--typet"},"type(T).f / type(T)"),(0,i.kt)("p",null,"These expressions are parsed normally, except ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," is changed to ",(0,i.kt)("inlineCode",{parentName:"p"},"type_of"),", since ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," is a keyword in rust. If the original expression was a cast, the ",(0,i.kt)("inlineCode",{parentName:"p"},"type_of")," call will be omitted and the expression will be parsed as a cast."),(0,i.kt)("h3",{id:"mappingarray-manipulation"},"Mapping/array manipulation"),(0,i.kt)("p",null,"Only special thing here is that Sol2Ink will not use indexed approach to data, but will use ",(0,i.kt)("inlineCode",{parentName:"p"},"unwrap_or_default()")," in case of reading, and ",(0,i.kt)("inlineCode",{parentName:"p"},"insert")," in case of writing from or to a mapping or array (which is parsed as a vec)."),(0,i.kt)("p",null,"All other expressions are parsed as expected:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"struct initializations"),(0,i.kt)("li",{parentName:"ul"},"function calls"),(0,i.kt)("li",{parentName:"ul"},"arithmetic operations"),(0,i.kt)("li",{parentName:"ul"},"logical operations")),(0,i.kt)("p",null,"After Sol2Ink parses everything, it will assemble the final ink! contract."))}d.isMDXComponent=!0}}]);