"use strict";(self.webpackChunksol_2_ink=self.webpackChunksol_2_ink||[]).push([[442],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1,title:"Preparation"},a=void 0,l={unversionedId:"tutorial/preparation",id:"tutorial/preparation",title:"Preparation",description:"In this tutorial we will transpile the ERC-20 contract from OpenZeppelin which you can find here.",source:"@site/docs/tutorial/preparation.md",sourceDirName:"tutorial",slug:"/tutorial/preparation",permalink:"/tutorial/preparation",draft:!1,editUrl:"https://github.com/Supercolony-net/sol2ink/tree/main/docs/docs/tutorial/preparation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Preparation"},sidebar:"tutorialSidebar",previous:{title:"Capabilities",permalink:"/capabilities"},next:{title:"Building the ink! smart contract",permalink:"/tutorial/building"}},p={},c=[{value:"Preparation",id:"preparation",level:4},{value:"Running Sol2Ink",id:"running-sol2ink",level:4}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this tutorial we will transpile the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"},"ERC-20 contract")," from OpenZeppelin which you can find here."),(0,i.kt)("h4",{id:"preparation"},"Preparation"),(0,i.kt)("p",null,"We will navigate to the folder where we saved ",(0,i.kt)("inlineCode",{parentName:"p"},"sol_to_ink"),". To ease the access to input and output files, we will put the ERC-20 contract to the same directory. Before we run the program, we will do some adjustments to the ERC-20 files. We will add the events from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol"},"IERC-20 interface"),". We do this, because later in the contract we want to emit these events, and if the parser does not know about them when emitting, it will panic with ",(0,i.kt)("inlineCode",{parentName:"p"},"Event XXX not defined"),". Another thing we will change is rewrite all functions ",(0,i.kt)("inlineCode",{parentName:"p"},"_msgSender()")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"msg.sender"),". We do this, because we want to demonstrate how to call ",(0,i.kt)("inlineCode",{parentName:"p"},"msg.sender")," in ink!, and this function resides in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Context")," contract."),(0,i.kt)("h4",{id:"running-sol2ink"},"Running Sol2Ink"),(0,i.kt)("p",null,"Running Sol2Ink is easy. Once we navigate to the directory where it resides, we will just call ",(0,i.kt)("inlineCode",{parentName:"p"},"./sol_to_ink ERC20.sol"),". Notice that we passed the name of the file as an argument. The output file will be stored in newly created folder ",(0,i.kt)("inlineCode",{parentName:"p"},"ERC20"),", which will contain files ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"lib.rs"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," will contain all the dependencies to build our contract, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"lib.rs")," file will contain the parsed ink! smart contract. Now we will try to build it!"))}u.isMDXComponent=!0}}]);