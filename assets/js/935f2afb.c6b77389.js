"use strict";(self.webpackChunksol_2_ink=self.webpackChunksol_2_ink||[]).push([[53],{1109:i=>{i.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting started","href":"/sol2ink/docs/","docId":"intro"},{"type":"link","label":"Capabilities","href":"/sol2ink/docs/capabilities","docId":"capabilities"},{"type":"category","label":"ERC-20 Tutorial","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Preparation","href":"/sol2ink/docs/tutorial/preparation","docId":"tutorial/preparation"},{"type":"link","label":"Building the ink! smart contract","href":"/sol2ink/docs/tutorial/building","docId":"tutorial/building"}]},{"type":"category","label":"How it works","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Parsing","href":"/sol2ink/docs/how_it_works/parsing","docId":"how_it_works/parsing"},{"type":"link","label":"Parsing an interface","href":"/sol2ink/docs/how_it_works/parsing_interface","docId":"how_it_works/parsing_interface"},{"type":"link","label":"Parsing a contract","href":"/sol2ink/docs/how_it_works/parsing_contract","docId":"how_it_works/parsing_contract"},{"type":"link","label":"Parsing functions","href":"/sol2ink/docs/how_it_works/parsing_functions","docId":"how_it_works/parsing_functions"},{"type":"link","label":"Parsing expressions","href":"/sol2ink/docs/how_it_works/parsing_expressions","docId":"how_it_works/parsing_expressions"},{"type":"link","label":"Assembling a contract","href":"/sol2ink/docs/how_it_works/assembler","docId":"how_it_works/assembler"}]},{"type":"link","label":"Known issues","href":"/sol2ink/docs/issues","docId":"issues"}]},"docs":{"capabilities":{"id":"capabilities","title":"Capabilities","description":"Sol2Ink in its current state is able to parse compilable Solidity interfaces into ink! traits and compilable Solidity contracts into ink! contracts, while leveraging the power of OpenBrush. Currently, Sol2Ink supports only single file contract transpiling, not supporting inheritance. The output of Sol2Ink is a folder with the ink! smart contract and a Cargo.toml.","sidebar":"tutorialSidebar"},"how_it_works/assembler":{"id":"how_it_works/assembler","title":"Assembling a contract","description":"Sol2Ink has everything it needs, now it just needs to mix it together. Here we will just add some notes, which may not be obvious.","sidebar":"tutorialSidebar"},"how_it_works/parsing":{"id":"how_it_works/parsing","title":"Parsing","description":"In this section we will take a look at how Sol2Ink works under the hood.","sidebar":"tutorialSidebar"},"how_it_works/parsing_contract":{"id":"how_it_works/parsing_contract","title":"Parsing a contract","description":"Another case is parsing of a contract, which will start if the program finds a contract definition. While parsing a contract, the program looks for the following:","sidebar":"tutorialSidebar"},"how_it_works/parsing_expressions":{"id":"how_it_works/parsing_expressions","title":"Parsing expressions","description":"Another step of parsing a statement is parsing of each expressions. Here the program will decide how to parse each expression inside of a statement.","sidebar":"tutorialSidebar"},"how_it_works/parsing_functions":{"id":"how_it_works/parsing_functions","title":"Parsing functions","description":"At this point the parser knows all the members of the contract, and has the information about what the Solidity statements of each function and modifier look like, in the form of Statement::Raw, so we will parse them into correct form. For every statement we will check, which statement does it fit.","sidebar":"tutorialSidebar"},"how_it_works/parsing_interface":{"id":"how_it_works/parsing_interface","title":"Parsing an interface","description":"First we will describe parsing of interface, since less work is done in this case. Once the program finds interface definition, it will start parsing the interface and saves the comments which it parsed until this point. While parsing the interface, the program looks for the following:","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Sol2Ink Documentation","description":"Welcome to Sol2Ink documentation. In this documentation we will describe the capabilities of Sol2Ink, how the process works under the hood,","sidebar":"tutorialSidebar"},"issues":{"id":"issues","title":"Known issues","description":"Here is a list of known issues, which you may face using Sol2Ink:","sidebar":"tutorialSidebar"},"tutorial/building":{"id":"tutorial/building","title":"Building the ink! smart contract","description":"To build the ink! smart contract we will need cargo-contract. So if we satisfy this condition, we will navigate to the generated folder ERC20 and call cargo contract build. The contract will start building, we will wait for a while and...","sidebar":"tutorialSidebar"},"tutorial/preparation":{"id":"tutorial/preparation","title":"Preparation","description":"In this tutorial we will transpile the ERC-20 contract from OpenZeppelin which you can find here.","sidebar":"tutorialSidebar"}}}')}}]);